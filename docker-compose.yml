services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cms_postgres
    environment:
      POSTGRES_DB: cms_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: cms_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - cms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cms_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # .NET CMS Application
  cms_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cms_app
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=cms_db;Username=postgres;Password=cms_password_123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cms_network
    restart: unless-stopped

  # Test Runner Service
  cms_tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: cms_tests
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=cms_test_db;Username=postgres;Password=cms_password_123
    volumes:
      - ./TestResults:/app/TestResults
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cms_network
    profiles:
      - test

networks:
  cms_network:
    driver: bridge

volumes:
  postgres_data:
